model_args: # model construction args
  src_vocab: 8000
  tgt_vocab: 8000
  enc_layers: 6
  dec_layers: 6
  hid_size: 512
  ff_size: 2048
  n_heads: 8
  attn_bias: true
  attn_dropout: 0.1
  dropout: 0.1
  activation: relu
  tied_emb: three-way
model_type: tfmnmt  # model type. tfmnmt is the transformer NMT model
optim:
  args:
    betas:
    - 0.9
    - 0.997
    eps: 1.0e-09
    label_smoothing: 0.1
    lr: 0.2
    warmup_steps: 16000
    constant: 2
    amsgrad: false
    weight_decay: 0
    criterion: smooth_kld
    inv_sqrt: false
  name: ADAM
prep: # data preparation
  codec_lib: nlcodec
  char_coverage: 0.9995
  max_types: 8000  # maximum number of types in vocab ; if shared_vocab=false, set max_src_types and max_tgt_types separately instead of this one
  pieces: bpe   # choices: bpe, char, word, unigram  from google/sentencepiece
  shared_vocab: true  # true means same vocab for src and tgt, false means different vocabs
  src_len: 256   # longer sentences, decision is made as per 'truncate={true,false}'
  tgt_len: 256
  truncate: true   # what to do with longer sentences: if true truncate at src_len or tgt_len; if false filter away
  train_src: data-deen/train.deu.tok
  train_tgt: data-deen/train.eng.tok
  valid_src: data-deen/dev.deu.tok
  valid_tgt: data-deen/dev.eng.tok
  mono_src: []  # monolingual data for learning vocab or BPE
  mono_tgt: []
tester:
  decoder:
    beam_size: 4
    batch_size: 12000  # this is for 1 beam; effective_batch_size = batch_size / beam_size
    lp_alpha: 0.6     # length penalty
    ensemble: 5
    max_len: 50
  suit:  # suit of tests to run after the training
    # name of test and list of src.tok, ref files (ref should be unmodified)
    dev:
    - data-deen/dev.deu.tok
    - data-deen/dev.eng
    test:
    - data-deen/test.deu.tok
    - data-deen/test.eng
trainer:
  init_args:
    chunk_size: 20   # generation in chunks of time steps to reduce memory consumption
  batch_size: 4200   # not exceeding these many tokens (including paddings). in tensor2tensor it is mean batch size
  check_point: 1000  # how often to checkpoint?
  keep_models: 10   # how many checkpoints to keep on disk (small enough to save disk, large enough for checkpt averaging
  steps: 200000   # how many steps to train
updated_at: '2021-03-24T00:44:16.597231'
seed: 12345  # fix the manual seed of pytorch + cuda + numpy + python_stdlib RNGs.  Remove/comment this to disable
