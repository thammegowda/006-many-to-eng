model_args: # model construction args
  src_vocab: 20353
  tgt_vocab: 44529
  enc_layers: 9
  dec_layers: 6
  hid_size: 768
  ff_size: 2048
  n_heads: 12
  attn_bias: true
  attn_dropout: 0.1
  dropout: 0.1
  activation: gelu
  tied_emb: one-way
model_type: tfmnmt  # model type. tfmnmt is the transformer NMT model
optim:
  args:
    betas:
    - 0.9
    - 0.98
    eps: 1.0e-09
    label_smoothing: 0.1
    lr: 0.0005
    warmup_steps: 4000
    criterion: smooth_kld
    constant: 2
    amsgrad: false
    weight_decay: 0
    inv_sqrt: false
  name: ADAM
parent:
  experiment: 500eng-02-768d-9L6L-512k64k-datav1
  vocab:
    src: src
    tgt: tgt
  shrink: true  # shrink vocabularies to train_{src,tgt}
  model:
    args: true  # update model_args to match with parent
    ensemble: 5 # init from avg of last 5 checkpts of parent

prep: # data preparation
  codec_lib: nlcodec
  char_coverage: 0.9998
  max_src_types: 4000
  max_tgt_types: 4000
  pieces: bpe   # choices: bpe, char, word, unigram  from google/sentencepiece
  shared_vocab: false  # true means same vocab for src and tgt, false means different vocabs
  src_len: 160   # longer sentences, decision is made as per 'truncate={true,false}'
  tgt_len: 160
  truncate: true   # what to do with longer sentences: if true truncate at src_len or tgt_len; if false filter away
  train_src: data/wiki_si_en_bpe5000/train.si
  train_tgt: data/wiki_si_en_bpe5000/train.en.tok
  valid_src: data/wiki_si_en_bpe5000/valid.si
  valid_tgt: data/wiki_si_en_bpe5000/valid.en.tok
  max_part_size: 5_000_000
tester:
  decoder:
    beam_size: 4
    batch_size: 10000  # # this is for 1 beam; effective_batch_size = batch_size / beam_size
    lp_alpha: 0.6     # length penalty
    ensemble: 5
    max_len: 50
  suit:
    dev:
    - data/wiki_si_en_bpe5000/valid.si
    - data/wiki_si_en_bpe5000/valid.en
    test:
    - data/wiki_si_en_bpe5000/test.si
    - data/wiki_si_en_bpe5000/test.en

trainer:
  init_args:
    chunk_size: 5   # generation in chunks of time steps to reduce memory consumptio
    grad_accum: 1
  batch_size: [4000, 400]   # not exceeding these many tokens (including paddings). in tensor2tensor it is mean batch size
  check_point: 1000  # how often to checkpoint?
  keep_models: 10   # how many checkpoints to keep on disk (small enough to save disk, large enough for checkpt averaging
  steps: 160000   # how many steps to train
  keep_in_mem: false
  sort_by: eq_len_rand_batch
  early_stop:
    enabled: true
    by: loss
    signi_round: 5
    patience: 15
    min_steps: 16000
updated_at: '2021-02-28T15:03:23.822660'
